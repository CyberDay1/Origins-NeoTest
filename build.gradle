import java.util.zip.ZipFile

plugins {
    id 'java'
    id 'net.neoforged.gradle.userdev' version '7.0.190'
}

group = 'io.github.apace100'
version = "${property('mod_version')}-neoforge-${property('minecraftVersion')}"
archivesBaseName = 'origins-neoforge'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

repositories {
    maven { url = 'https://maven.neoforged.net/releases' }
    mavenCentral()
}

dependencies {
    implementation "net.neoforged:neoforge:${property('neoforgeVersion')}"
    implementation 'com.google.guava:guava:31.1-jre'
}

runs {
    runAudit {
        workingDirectory project.file('run')
        taskName 'runAudit'
        args '--username', 'DevAudit'
        property 'origins.debugAudit', 'true'
    }
}

tasks.register("extractFabricDatapack") {
    doLast {
        def zips = file("${projectDir}/external/fabric-origins-zips").listFiles()?.findAll { it.name.endsWith(".zip") }
        if (!zips || zips.isEmpty()) {
            throw new GradleException("No Origins zip found in external/fabric-origins-zips/")
        }
        def latestZip = zips.sort { -it.lastModified() }.first()
        println "Extracting datapack from ${latestZip.name}"

        copy {
            from(zipTree(latestZip)) {
                include "*/src/main/resources/**"
            }
            into("${projectDir}/run/datapacks/origins-fabric")
            eachFile { details ->
                // Drop top-level folder segments like origins-fabric-1.21.x-dev/
                details.relativePath = new RelativePath(true, details.relativePath.segments.drop(3))
            }
            includeEmptyDirs = false
        }
    }
}

tasks.named("runAudit") {
    dependsOn("extractFabricDatapack")
}

sourceSets {
    main {
        resources {
            exclude('versions/**')
        }
    }
}

tasks.processResources {
    def modProps = [
        mod_id: project.findProperty('mod_id') ?: 'origins',
        mod_version: project.findProperty('mod_version') ?: '0.1.0',
        mod_mc: project.findProperty('minecraftVersion') ?: '1.21.1'
    ]
    inputs.properties(modProps)
    filesMatching('META-INF/neoforge.mods.toml') {
        expand(modProps)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
    options.compilerArgs += [
        "-Xlint:all",          // enable all recommended warnings
        "-Werror",             // treat all warnings (including deprecation/unchecked) as errors
        "-Xlint:-processing",  // disable noisy annotation processing warnings
        "-Xlint:-serial"       // suppress serialVersionUID noise for data classes
    ]
}
