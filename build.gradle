import groovy.json.JsonSlurper

plugins {
    id 'java'
    id 'net.neoforged.gradle.userdev' version '7.0.190'
}

group = 'io.github.apace100'
version = "${property('mod_version')}-neoforge-${property('minecraftVersion')}"
archivesBaseName = 'origins-neoforge'

repositories {
    mavenLocal()
    maven { url = 'https://maven.neoforged.net/releases' }
    mavenCentral()
    maven { url = 'https://repo.spongepowered.org/maven' }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations.all {
    exclude group: 'com.llamalad7', module: 'MixinExtras'
    exclude group: 'com.github.LlamaLad7', module: 'MixinExtras'
}

dependencies {
    implementation "net.neoforged:neoforge:${property('neoforgeVersion')}"
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'org.slf4j:slf4j-api:2.0.12'
    implementation 'com.google.code.gson:gson:2.11.0'
    compileOnly 'org.spongepowered:mixin:0.8.5'
    compileOnly 'org.jetbrains:annotations:24.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    testImplementation 'org.tomlj:tomlj:1.1.0'
}

tasks.processResources {
    inputs.properties(
        'neoforge.mod.id': project.findProperty('mod_id') ?: 'origins',
        'neoforge.mod.version': project.findProperty('mod_version') ?: '0.1.0',
        'neoforge.mod.mc': project.findProperty('minecraftVersion') ?: '1.21.1'
    )
    filesMatching('META-INF/neoforge.mods.toml') {
        expand(inputs.properties)
    }
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release = 21
}

tasks.register('rescaleOres', JavaExec) {
    group = 'worldrise'
    description = 'Rescales vanilla + modded ore placement JSON into worldrise namespace'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.yourorg.worldrise.util.OreRescaler'
    args = [
        "$projectDir/src/main/resources/data/minecraft/worldgen/placed_feature",
        "$projectDir/src/main/resources/data/worldrise/worldgen/placed_feature"
    ]
}

def mixinConfigFiles() {
    fileTree(projectDir) {
        include 'src/**/mixin*.json'
        include 'config/**/mixin*.json'
    }
}

tasks.register('validateMixinCompatLevel') {
    doLast {
        mixinConfigFiles().each { file ->
            def json = new JsonSlurper().parse(file)
            if (json.compatibilityLevel != 'JAVA_21') {
                throw new GradleException("${file} is missing compatibilityLevel JAVA_21")
            }
        }
    }
}

tasks.register('validateNoExternalMixinExtras') {
    doLast {
        fileTree('versions').matching {
            include '**/*.java'
        }.each { file ->
            if (file.text.contains('com.llamalad7.mixinextras')) {
                throw new GradleException("Found illegal import of external MixinExtras in ${file}")
            }
        }
    }
}

tasks.named('build').configure {
    dependsOn('validateMixinCompatLevel', 'validateNoExternalMixinExtras')
}

// ----- Manifest population -----
def modsToml = file('src/main/resources/META-INF/neoforge.mods.toml')
def modMetadata = [
    modId: project.findProperty('mod_id') ?: 'origins',
    displayName: null,
    version: project.findProperty('mod_version') ?: project.version,
    mcVersion: project.findProperty('minecraftVersion') ?: '1.21.1'
]

def placeholderValues = [
    'neoforge.mod.id': modMetadata.modId,
    'neoforge.mod.version': modMetadata.version,
    'neoforge.mod.mc': modMetadata.mcVersion
]

if (modsToml.exists()) {
    def currentMod = [:]
    def inModBlock = false
    def resolvePlaceholder = { String raw ->
        if (raw.startsWith('${') && raw.endsWith('}')) {
            def key = raw.substring(2, raw.length() - 1)
            return placeholderValues.getOrDefault(key, raw)
        }
        return raw
    }
    modsToml.readLines().each { line ->
        def trimmed = line.trim()
        if (trimmed.startsWith('[[mods]]')) {
            inModBlock = true
            return
        }
        if (inModBlock) {
            if (trimmed.startsWith('modId')) {
                def value = trimmed.split('=')[1].trim().replaceAll('"', '')
                currentMod.modId = resolvePlaceholder(value)
            }
            if (trimmed.startsWith('displayName')) {
                currentMod.displayName = trimmed.split('=')[1].trim().replaceAll('"', '')
            }
            if (trimmed.startsWith('version')) {
                def value = trimmed.split('=')[1].trim().replaceAll('"', '')
                currentMod.version = resolvePlaceholder(value)
            }
        }
    }
    modMetadata.putAll(currentMod)
}

if (!modMetadata.displayName) {
    modMetadata.displayName = 'Origins (NeoForge)'
}

jar {
    manifest {
        attributes(
            'FMLModType': 'MOD',
            'Specification-Title': modMetadata.displayName,
            'Specification-Vendor': 'CyberDay',
            'Specification-Version': '1',
            'Implementation-Title': modMetadata.modId,
            'Implementation-Version': modMetadata.version ?: project.version,
            'Implementation-Vendor': 'CyberDay'
        )
    }
}
